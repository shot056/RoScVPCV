// Class automatically generated by Dev-C++ New Class wizard

#include "ShortcutItem.h" // class's header file

wxString count2key[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9",
                        "Q", "W", "E", "R", "T", "Y", "U", "I", "O",
                        "A", "S", "D", "F", "G", "H", "J", "K", "L",
//                        "Z", "X", "C", "V", "B", "N", "M", "LArrow", "RArrow"};
                        "Z", "X", "C", "V", "B", "N", "M", "<", ">"};

// class constructor
ShortcutItem::ShortcutItem(int count, MyStringHash *SkillStrHash, MyStringHash *SkillNameHash, MyStringHash *ItemNameHash)
{
    // insert your code here

    SkillId2Str = SkillStrHash;
    SkillId2Name = SkillNameHash;
    ItemId2Name = ItemNameHash;
    ItemImage = new wxBitmap;
    PositionCount = count;
    Count = 0;
    Name = wxT("");
    isActive = false;
    /*
    MyStringHash::iterator it;
    for( it = Id2Str->begin(); it != Id2Str->end(); ++it ) {
        wxString key = it->first, value = it->second;
        wxMessageBox(key + wxT(" => ") + value + wxT("\n") + key + wxT(" => ") + Id2Name->operator[](key),
                     wxT("msg"), wxOK);
    }
    */
    /*
    KeyImage = new wxBitmap;
    if(!KeyImage->LoadFile(wxT(".\\KeyImage\\") + count2key[count] + wxT(".bmp"), wxBITMAP_TYPE_BMP)) {
        wxMessageBox(wxT(".\\KeyImage\\") + count2key[count] + wxT(".bmp")+wxT("がロードできません"),
                     wxT("エラー"), wxOK);
    }
    wxMask *KeyMask = new wxMask(*KeyImage, wxColor(0xff,0x00,0xff));
    KeyImage->SetMask(KeyMask);
    */
    DrawFlag = false;
}

// class destructor
ShortcutItem::~ShortcutItem()
{
    // insert your code here
}

bool ShortcutItem::SetItem(int type, int id, int count, bool active)
{
    Type   = type;
    ItemID = id;
    Count  = count;

    wxString idstr;
    idstr.sprintf(wxT("%d"), ItemID);
    // IDが0なのでクリアです
    if(id == 0) {
        if(ItemImage->IsOk()) {
            delete ItemImage;
            ItemImage = new wxBitmap;
        }
        DrawFlag = false;
    }
    else {
        wxString ItemBmpPath;
        // 0はアイテム
        if(Type == 0) {
            ItemBmpPath.sprintf(wxT(".\\0item\\%05d.bmp"), ItemID);
            Name = ItemId2Name->operator[](idstr);
        }
        // 1はスキル
        else if(Type == 1) {
            // nothing to do
            wxString SkillStr = SkillId2Str->operator[](idstr);
            ItemBmpPath.sprintf(wxT(".\\0skill\\%s.bmp"), SkillStr.MakeLower().c_str());
            Name = SkillId2Name->operator[](idstr);
        }

//        wxMessageBox(ItemBmpPath + wxT("をロードします"), wxT("メッセージ"), wxOK);
        ItemImage = new wxBitmap;
        wxLogMessage(wxT("        LoadFile : ")+ItemBmpPath);
        if( !ItemImage->LoadFile(ItemBmpPath, wxBITMAP_TYPE_BMP) ) {
            wxLogMessage(wxT("        LoadFile : .\\no_image.bmp"));
            if( !ItemImage->LoadFile(wxT(".\\no_image.bmp"), wxBITMAP_TYPE_BMP) ) {
                return false;
            }
        }
        wxMask *ItemMask = new wxMask(*ItemImage, wxColor(0xff, 0x00, 0xff));
        ItemImage->SetMask(ItemMask);

        isActive = active;
        /*
        wxImage image = ItemImage->ConvertToImage();
        if( !active ) {
            image = image.ConvertToGreyscale();
        }
        ItemImage = new wxBitmap(image);
        */
        DrawFlag = true;
    }
    return true;
}

// No description
bool ShortcutItem::Draw(wxPaintDC *dc)
{
    /* TODO (#1#): Implement ShortcutItem::Draw() */

/*
    int NewPositionCount;
    if(PositionCount < 9) {
        NewPositionCount = PositionCount + 18;
    }
    else {
        NewPositionCount = PositionCount - 9;
    }
    int x = NewPositionCount % 9;
    int y = NewPositionCount / 9;
*/
    int x = PositionCount % 9;
    int y = PositionCount / 9;
    /*
    wxString str;
    str.sprintf(wxT("PositionCount = %d\nx = %d : y = %d"), PositionCount, x, y);
    wxMessageBox(str, wxT("msg"), wxOK);
    */
    if(DrawFlag && ItemImage->IsOk()) {
        wxImage image = ItemImage->ConvertToImage();

        if( !isActive ) {
            unsigned char mr = image.GetMaskRed(),
                          mg = image.GetMaskGreen(),
                          mb = image.GetMaskBlue();

            image.InitAlpha();
            int i,j;
            for (i = 0; i < image.GetWidth(); i++) {
                for (j = 0; j < image.GetHeight(); j++) {
                    unsigned char pr = image.GetRed(i,j),
                                  pg = image.GetGreen(i,j),
                                  pb = image.GetBlue(i,j);
                    /*
                    wxLogMessage(wxT("%u,%u,%u : %u,%u,%u"),
                                 mr, mg, mb,
                                 pr, pg, pb);
                    */
                    // マスクカラーと同じじゃなければアルファを設定する
                    if( !( mr == pr and mg == pg and mb == pb ) ) {
                        image.SetAlpha( i, j, 70 );
                    }
                }
            }
//            image = image.ConvertToGreyscale();
        }
        wxBitmap *bImage;
        bImage = new wxBitmap(image);
        dc->DrawBitmap(*bImage, x * 29 + 5, y * 34 + 5, true);

        wxString CountStr;
        CountStr.sprintf(wxT("%d"), Count);
        int count_base = (30 - CountStr.Length() * 6);
        if(Type == 1 && Count != 0) {
            // スキルレベル等描画
            dc->SetFont(wxFont(8, wxDEFAULT, wxNORMAL, wxNORMAL, false));
            dc->SetTextForeground(wxColour(0x00, 0x00, 0x00));
            for( int bx = -1; bx < 2; bx ++ ) {
                for( int by = -1; by < 2; by ++ ) {
                    dc->DrawText(CountStr, x * 29 + count_base + bx, y * 34 + 20 + by);
                }
            }
            dc->SetTextForeground(wxColour(0xFF, 0xFF, 0xFF));
            dc->DrawText(CountStr, x * 29 + count_base, y * 34 + 20);
        }
    }

    // キーコード描画
    dc->SetTextForeground(wxT("ORANGE"));
    dc->SetFont(wxFont(14, wxMODERN , wxITALIC, wxBOLD, false));
    for( int bx = -1; bx < 2; bx ++ ) {
        for( int by = -1; by < 2; by ++ ) {
            dc->DrawText(count2key[PositionCount], x * 29 + bx, y * 34 + by);
        }
    }

    dc->SetTextForeground(wxColour(0xff,0x80,0x00));
    dc->DrawText(count2key[PositionCount], x * 29, y * 34);

//    if(KeyImage->IsOk()) {
//        dc->DrawBitmap(*KeyImage, x * 29 + 3, y * 34 + 3, true);
//    }
    return true;
}
